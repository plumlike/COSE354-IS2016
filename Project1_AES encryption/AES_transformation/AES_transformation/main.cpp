#include<stdint.h>
#include<string.h>
#include<stdlib.h>
#include<stdio.h>

static const uint8_t Sbox[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

static const uint8_t Mbox[9] = {
	0x01,0x02,0x02,
	0x02,0x02,0x01,
	0x02,0x01,0x02
};

static const uint8_t inv_Mbox[9] = {
	0x01,0xF7,0xF7,
	0xF7,0xF7,0x01,
	0xF7,0x01,0xF7
};

void keyGenerate(uint32_t key, uint32_t word[10000], uint8_t rk[11][7])
{
	int wordNum = 0, shiftNum = 0;
	word[0] = key;

	for (int i = 1; i <= 16; i++) {
		word[i] = (word[0] << (5 * i) % 32) | (word[0] >> (32 - (5 * i) % 32));
	}

	for (int i = 0; i <= 10; i++) {
		for (int j = 0; j <= 5; j++) {
			if (shiftNum == 0) {
				rk[i][j] = (word[wordNum] & 0xff000000UL) >> 24; shiftNum++;
			}
			else if (shiftNum == 1) {
				rk[i][j] = (word[wordNum] & 0x00ff0000UL) >> 16; shiftNum++;
			}
			else if (shiftNum == 2) {
				rk[i][j] = (word[wordNum] & 0x0000ff00UL) >> 8; shiftNum++;
			}
			else {
				rk[i][j] = (word[wordNum] & 0x000000ffUL); shiftNum = 0; wordNum++;
			}
		}
	}
	return;
}

uint8_t gf_multiple(uint8_t shifting, uint8_t input)
{
	if (shifting == 0x02) {
		if (input >= 0x80) {
			input = input << 1;	input = input ^ 0x1B;
		}
		else {
			input = input << 1;
		}
		return input;
	}
	else {
		return input;
	}
}

int main()
{
	int round = 0;

	uint32_t key = 0x12345678; //keySize = 32bits
							   //uint8_t input[6] = {0x01,0x23, 0x45, 0x67, 0x89, 0xAB};  //In order to problem2 testing..
	uint8_t input[6] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55 }; // PLAINTEXT.. blockSize = 8bits * 6 = 48bits
	uint32_t word[10000] = { 0 }; // 1word = 4byte = 32bits
	uint8_t rk[11][7] = { 0 }; // Round Key 
	uint8_t temp[6]; // for Mbox's multiplication

	//for (uint32_t key = 0x00000000; key <= 0xFFFFFFFF; key++) { //In order to Testing problem2's Brute-force-attack

	keyGenerate(key, word, rk);

	printf("\n==>PALINTEXT  : ");
	for (int i = 0; i<6; i++) {
		printf("%02x ", input[i]);
	}	printf("\n");

	for (round = 0; round<10; round++) {

		//printing ROUNDnum & RoundKEY
		printf("\n[ROUND %d]\n", round);
		printf("rk%d     : ", round);
		for (int j = 0; j<6; j++) {
			printf("%02x", rk[round][j]);
		}	printf("\n");

		/*
		if (round == 0) {//In order to Testing problem2's Brute-force-attack
		input[0] = 0x01;input[1] = 0x23;input[2] = 0x45;input[3] = 0x67;input[4] = 0x89;input[5] = 0xAB;
		}
		*/

		if (round == 0) {
			input[0] = 0x00; input[1] = 0x11; input[2] = 0x22; input[3] = 0x33; input[4] = 0x44; input[5] = 0x55; //PLAINTEXT
		}
		for (int i = 0; i<6; i++) {
			input[i] = input[i] ^ rk[round][i];
		}
		printf("XOR     : ");
		for (int i = 0; i<6; i++) {
			printf("%02x", input[i]);
		}	printf("\n");

		// S-box
		for (int i = 0; i<6; i++) {
			input[i] = Sbox[input[i]];
		}
		printf("SBOX    : ");
		for (int i = 0; i<6; i++) {
			printf("%02x", input[i]);
		}	printf("\n"); //.. S box

		//MBOX
		temp[0] = gf_multiple(Mbox[0], input[1]) ^ gf_multiple(Mbox[1], input[2]) ^ gf_multiple(Mbox[2], input[3]);
		temp[1] = gf_multiple(Mbox[3], input[1]) ^ gf_multiple(Mbox[4], input[2]) ^ gf_multiple(Mbox[5], input[3]);
		temp[2] = gf_multiple(Mbox[6], input[1]) ^ gf_multiple(Mbox[7], input[2]) ^ gf_multiple(Mbox[8], input[3]);
		temp[3] = gf_multiple(Mbox[0], input[4]) ^ gf_multiple(Mbox[1], input[5]) ^ gf_multiple(Mbox[2], input[0]);
		temp[4] = gf_multiple(Mbox[3], input[4]) ^ gf_multiple(Mbox[4], input[5]) ^ gf_multiple(Mbox[5], input[0]);
		temp[5] = gf_multiple(Mbox[6], input[4]) ^ gf_multiple(Mbox[7], input[5]) ^ gf_multiple(Mbox[8], input[0]);

		printf("MBOX    : ");
		for (int i = 0; i<6; i++) {
			printf("%02x", temp[i]);
			input[i] = temp[i];
		}	printf("\n"); //.. M box
	}

	// print 10th RoundKey
	printf("\nrk10    : ");
	for (int j = 0; j<6; j++) {
		printf("%02x", rk[10][j]);
	}

	// The final XOR with 10th RoundKey
	for (int i = 0; i<6; i++) {
		input[i] = input[i] ^ rk[10][i];
	}

	printf("\n =>CIPHERTEXT : ");
	for (int i = 0; i<6; i++) {
		printf("%02x ", input[i]);
	}	printf("\n\n");

	/*
	//In order to Testing problem2's Brute-force-attack
	if (input[0] == 0xFB && input[1] == 0xD0 && input[2] == 0x40 && input[3] == 0xD6 && input[4] == 0xDB && input[5] == 0x9C) {
	printf("REAL KEY   : %08X\n", key);
	printf("CIPHERTEXT : ");
	for (int i = 0; i<6; i++) {
	printf("%02x ", input[i]);
	}
	break;
	}
	}
	*/

	return 0;
}
